using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BelyaevKA03072024exam
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int n; // объявление целочисленной переменной размерности массива
            double x, p, D; // объявление переменных с плавающей точкой для случайной величины x, вероятности p, и дисперсии D
            double p_sum = 0, M = 0, D_sum = 0; // объявление переменных с плавающей точкой с присваиванием нуля для нахождения суммы p_sum - сумма вероятносте йдля проверки равенства одному, M - математическое ожидание сразу суммирует произведение введённой пары x и p, D_sum - сумма для будущего использования в формуле дисперсии
            int i = 5; // целочисленная переменная количества попыток на неверный ввод
            while (i > 0) // цикл 5 попыток
            {
                try // пытаемся
                {
                    Console.Write("Введите размерность массива: ");
                    n = Convert.ToInt32(Console.ReadLine()); // ввод и конвертация в целочисленный тип, присваивание переменной n
                    if (n <= 1) throw new Exception("Размерность массива должна быть больше 1"); // если n меньше или равно 1, нам не подходит, это неверный ввод, делаем исключение
                    double[,] input_m = new double[n, 2]; // создаем двумерный массив для хранения случайной величины x, вероятности p
                    for (int j = 0; j < n; j++) // цикл по каждой паре нашей таблицы для ввода значений
                    {
                        Console.Write("Введите x: ");
                        x = Convert.ToDouble(Console.ReadLine()); // ввод, конвертация в вещественный тип/с плавающей точкой
                        input_m[j, 0] = x; // записываем в наш двумерный массив значение x
                        Console.Write("Введите p: ");
                        p = Convert.ToDouble(Console.ReadLine()); // аналогично вводу x для вероятности p
                        if (p < 0 || p > 1) throw new Exception("p должно быть в промежутке [0;1]"); // если вероятность меньше 0 или больше 1 нам не подходит, исключение
                        input_m[j, 1] = p; // записываем вероятность в наш массив
                    }

                    for (int j = 0;j < n; j++) // цикл для нахождения математического ожидания и дисперсии
                    {
                        x = input_m[j, 0]; // берем x из массива
                        p = input_m[j, 1]; // берем p из массива
                        p_sum += p; // нахождение суммы вероятностей для будущей проверки 
                        M += x * p; // нахождение математического ожидания
                        D_sum += Math.Pow(x, 2) * p; // нахождение суммы для нахождения дисперсии в будущем
                    }
                    if (p_sum != 1) throw new Exception("Сумма всех вероятностей p должна равняться 1"); // если сумма вероятностей не равна 1 исключение, т.к. это неверный ввод
                    D = D_sum - Math.Pow(M, 2); // нахождение дисперсии
                    // можно было считать все необходимое прям в предыдущем цикле, но отдельный цикл делает код более гибким к изменениям, ввод массива можно заменить, может взять этот цикл в отдельную функцию при надобности

                    Console.WriteLine($"Количество значений (размерность массива) n = {n}"); // вывод размерности массива
                    Console.WriteLine($"Математическое ожидание М(Х) = {M}"); // вывод мат. ожидания
                    Console.WriteLine($"Дисперсия D(X) = {D}"); // вывод дисперсии

                    Console.WriteLine("ФИО: Беляев Константин Андреевич"); // вывод ФИО (Беляев)
                    Console.WriteLine("Группа: 31ИС"); // вывод группы
                    Console.ReadLine(); // удержание экрана чтобы увидеть вывод
                    break; // окончание цикла while для учет попыток для окончания программы
                }
                catch (Exception ex) // ловим исключение, что-то пошло не по плану
                {
                    Console.WriteLine(ex.Message); // вывод сообщения ошибки: стандартного в C# или указанного в скорбказ после Exception
                }
                i--; // уменьшение попыток на одну
                Console.WriteLine($"У вас осталось {i} попыток."); // вывод количества попыток после срабатывания исключения
            }
            if (i == 0) // если попытки закончились
            {
                Console.WriteLine("У вас закончились попытки.");
                Console.WriteLine("В следующий раз сразу вводите допустимые значения.");
                Console.WriteLine("Беляев Константин Андреевич 31ИС");
                // вывод текста при условии что программа закончилась из-за растраты попыток на неправильные вводы
            }
        }
    }
}
